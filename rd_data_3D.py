import argparseimport numpy as npparser = argparse.ArgumentParser(    description="Read results of LAMMPS simulations from subdirectories "                "and generate results table, called output_data_table.dat")parser.add_argument(    "--SFs",    type=float,    nargs='+',    help="scale factors",)parser.add_argument(    "--SEQ",    type=int,    nargs='+',    help="diaphite structure sequence",)parser.add_argument(    "--pot",    type=str,    help="Potential. Accepts tersoff or lcbop.",)args = parser.parse_args()def retrieve_data(seq, sfa, sfb, sfc, pot, energies, volumes, scalefactors):    g = open(f"./seq_{seq}_{pot}/dpt2_scaled_{sfa}_{sfb}_{sfc}_{pot}/energy.dat")    energies.append(float(g.read().strip()))    f = open(f"./seq_{seq}_{pot}/dpt2_scaled_{sfa}_{sfb}_{sfc}_{pot}/volume.dat")    volumes.append(float(f.read().strip()))    scalefactors.append([sfa, sfb, sfc])def create_table(energies, volumes, scalefactors, pot, seq, evtable):    data = []    for i in range(0, len(energies)):        coord = (*scalefactors[i], energies[i], volumes[i])        data.append(coord)        low = np.argmin(energies)        minimum = (*scalefactors[low], energies[low], volumes[low])        ev = (volumes[low], energies[low])    with open(f"./seq_{seq}_{args.pot}/output_data_table_{args.pot}_seq_{seq}.dat", "w") as dat:        dat.write("Scalefactors (a, b, c) || energy || volume\n")        for data in data:            dat.write("{} {} {} {} {}\n".format(*data))        dat.write(f"# The minimum for the {seq} type 2 diaphite using the {pot} potential "                  "has scale factors {} (a), {} (b), {} (c), energy {:.3f}eV/atom, and volume {:.3f}Ã…/atom. \n".format(*minimum))    evtable.append([seq, *ev])def create_ev_table(evtable, pot):    with open(f"EV_plot_{pot}.dat", "w") as evplt:        evplt.write("Sequence || Volume || Energy\n")        for ev in evtable:            evplt.write("{} {} {}\n".format(*ev))evtable = []for seq in args.SEQ:    energies = []    volumes = []    scalefactors = []    for a in args.SFs:        for b in args.SFs:            for c in args.SFs:                a = float(a)                b = float(b)                c = float(c)                retrieve_data(seq, a, b, c, args.pot, energies, volumes, scalefactors)    create_table(energies, volumes, scalefactors, args.pot, seq, evtable)create_ev_table(evtable, args.pot)